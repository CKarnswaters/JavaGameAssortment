/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package CablesAndRacks;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.PopupMenu;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Elijah
 */
public class game extends javax.swing.JFrame {

    ArrayList<JPanel> squares = new ArrayList<JPanel>();
    ArrayList<player> players = new ArrayList<player>();
    ArrayList<JLabel> playerPieces = new ArrayList<JLabel>();
    int[] ladderStart = {3, 8, 20, 27, 35, 50, 70, 79};
    int[] ladderEnd = {13, 30, 41, 83, 43, 66, 90, 99};
    
    int[] slideStart = {15, 47, 48, 55, 61, 63, 86, 92, 94, 97};
    int[] slideEnd = {5, 25, 10, 52, 18, 59, 23, 72, 74, 77};
    
    boolean everythingsCool = false;
    int turn = 0;
    
    
    /**
     * Creates new form game
     */
    public game() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newGameFrame = new javax.swing.JFrame();
        howManyPlayersText = new javax.swing.JLabel();
        onePlayerRadio = new javax.swing.JRadioButton();
        twoPlayerRadio = new javax.swing.JRadioButton();
        threePlayerRadio = new javax.swing.JRadioButton();
        fourPlayerRadio = new javax.swing.JRadioButton();
        startGameButton = new javax.swing.JButton();
        playerOnePanel = new javax.swing.JPanel();
        playerOnePiece = new javax.swing.JComboBox();
        playerOneText = new javax.swing.JLabel();
        playerOneBox = new javax.swing.JTextField();
        playerTwoPanel = new javax.swing.JPanel();
        playerTwoText = new javax.swing.JLabel();
        playerTwoBox = new javax.swing.JTextField();
        playerTwoPiece = new javax.swing.JComboBox();
        playerThreePanel = new javax.swing.JPanel();
        playerThreeBox = new javax.swing.JTextField();
        playerThreeText = new javax.swing.JLabel();
        playerThreePiece = new javax.swing.JComboBox();
        playerFourPanel = new javax.swing.JPanel();
        playerFourText = new javax.swing.JLabel();
        playerFourBox = new javax.swing.JTextField();
        playerFourPiece = new javax.swing.JComboBox();
        playerGroup = new javax.swing.ButtonGroup();
        winGameFrame = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        youWinText = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        youWinText2 = new javax.swing.JLabel();
        youWinText3 = new javax.swing.JLabel();
        rollButton = new javax.swing.JButton();
        newGameButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        turnOrderText = new javax.swing.JLabel();
        turnText = new javax.swing.JLabel();
        playerMovedText = new javax.swing.JLabel();
        ladderSlideText = new javax.swing.JLabel();
        rack4to15 = new javax.swing.JLabel();
        rack9to31 = new javax.swing.JLabel();
        rack21to42 = new javax.swing.JLabel();
        rack28to84 = new javax.swing.JLabel();
        rack36to44 = new javax.swing.JLabel();
        rack51to67 = new javax.swing.JLabel();
        rack71to91 = new javax.swing.JLabel();
        rack80to100 = new javax.swing.JLabel();
        BoardContainer = new javax.swing.JLayeredPane();
        square1 = new javax.swing.JPanel();
        playerOnePiecePlace = new javax.swing.JLabel();
        playerTwoPiecePlace = new javax.swing.JLabel();
        playerThreePiecePlace = new javax.swing.JLabel();
        playerFourPiecePlace = new javax.swing.JLabel();
        square2 = new javax.swing.JPanel();
        square3 = new javax.swing.JPanel();
        square4 = new javax.swing.JPanel();
        square5 = new javax.swing.JPanel();
        square6 = new javax.swing.JPanel();
        square7 = new javax.swing.JPanel();
        square8 = new javax.swing.JPanel();
        square9 = new javax.swing.JPanel();
        square10 = new javax.swing.JPanel();
        square11 = new javax.swing.JPanel();
        square12 = new javax.swing.JPanel();
        square13 = new javax.swing.JPanel();
        square14 = new javax.swing.JPanel();
        square15 = new javax.swing.JPanel();
        square16 = new javax.swing.JPanel();
        square17 = new javax.swing.JPanel();
        square18 = new javax.swing.JPanel();
        square19 = new javax.swing.JPanel();
        square20 = new javax.swing.JPanel();
        square21 = new javax.swing.JPanel();
        square22 = new javax.swing.JPanel();
        square23 = new javax.swing.JPanel();
        square24 = new javax.swing.JPanel();
        square25 = new javax.swing.JPanel();
        square26 = new javax.swing.JPanel();
        square27 = new javax.swing.JPanel();
        square28 = new javax.swing.JPanel();
        square29 = new javax.swing.JPanel();
        square30 = new javax.swing.JPanel();
        square31 = new javax.swing.JPanel();
        square32 = new javax.swing.JPanel();
        square33 = new javax.swing.JPanel();
        square34 = new javax.swing.JPanel();
        square35 = new javax.swing.JPanel();
        square36 = new javax.swing.JPanel();
        square37 = new javax.swing.JPanel();
        square38 = new javax.swing.JPanel();
        square39 = new javax.swing.JPanel();
        square40 = new javax.swing.JPanel();
        square41 = new javax.swing.JPanel();
        square42 = new javax.swing.JPanel();
        square43 = new javax.swing.JPanel();
        square44 = new javax.swing.JPanel();
        square45 = new javax.swing.JPanel();
        square46 = new javax.swing.JPanel();
        square47 = new javax.swing.JPanel();
        square48 = new javax.swing.JPanel();
        square49 = new javax.swing.JPanel();
        square50 = new javax.swing.JPanel();
        square51 = new javax.swing.JPanel();
        square52 = new javax.swing.JPanel();
        square53 = new javax.swing.JPanel();
        square54 = new javax.swing.JPanel();
        square55 = new javax.swing.JPanel();
        square56 = new javax.swing.JPanel();
        square57 = new javax.swing.JPanel();
        square58 = new javax.swing.JPanel();
        square59 = new javax.swing.JPanel();
        square60 = new javax.swing.JPanel();
        square61 = new javax.swing.JPanel();
        square62 = new javax.swing.JPanel();
        square63 = new javax.swing.JPanel();
        square64 = new javax.swing.JPanel();
        square65 = new javax.swing.JPanel();
        square66 = new javax.swing.JPanel();
        square67 = new javax.swing.JPanel();
        square68 = new javax.swing.JPanel();
        square69 = new javax.swing.JPanel();
        square70 = new javax.swing.JPanel();
        square71 = new javax.swing.JPanel();
        square72 = new javax.swing.JPanel();
        square73 = new javax.swing.JPanel();
        square74 = new javax.swing.JPanel();
        square75 = new javax.swing.JPanel();
        square76 = new javax.swing.JPanel();
        square77 = new javax.swing.JPanel();
        square78 = new javax.swing.JPanel();
        square79 = new javax.swing.JPanel();
        square80 = new javax.swing.JPanel();
        square81 = new javax.swing.JPanel();
        square82 = new javax.swing.JPanel();
        square83 = new javax.swing.JPanel();
        square84 = new javax.swing.JPanel();
        square85 = new javax.swing.JPanel();
        square86 = new javax.swing.JPanel();
        square87 = new javax.swing.JPanel();
        square88 = new javax.swing.JPanel();
        square89 = new javax.swing.JPanel();
        square90 = new javax.swing.JPanel();
        square91 = new javax.swing.JPanel();
        square92 = new javax.swing.JPanel();
        square93 = new javax.swing.JPanel();
        square94 = new javax.swing.JPanel();
        square95 = new javax.swing.JPanel();
        square96 = new javax.swing.JPanel();
        square97 = new javax.swing.JPanel();
        square98 = new javax.swing.JPanel();
        square99 = new javax.swing.JPanel();
        square100 = new javax.swing.JPanel();
        controlSquare = new javax.swing.JPanel();

        newGameFrame.setTitle("New Game");
        newGameFrame.setMinimumSize(new java.awt.Dimension(400, 350));
        newGameFrame.setResizable(false);
        newGameFrame.setLocationRelativeTo(null);
        newGameFrame.setUndecorated(true);

        howManyPlayersText.setText("How many players:");

        playerGroup.add(onePlayerRadio);
        onePlayerRadio.setSelected(true);
        onePlayerRadio.setText("1");
        onePlayerRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onePlayerRadioActionPerformed(evt);
            }
        });

        playerGroup.add(twoPlayerRadio);
        twoPlayerRadio.setText("2");
        twoPlayerRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoPlayerRadioActionPerformed(evt);
            }
        });

        playerGroup.add(threePlayerRadio);
        threePlayerRadio.setText("3");
        threePlayerRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threePlayerRadioActionPerformed(evt);
            }
        });

        playerGroup.add(fourPlayerRadio);
        fourPlayerRadio.setText("4");
        fourPlayerRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourPlayerRadioActionPerformed(evt);
            }
        });

        startGameButton.setText("Start Game");
        startGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startGameButtonActionPerformed(evt);
            }
        });

        playerOnePiece.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose Piece...", "Mouse", "Router", "Keyboard", "Hard Drive" }));
        playerOnePiece.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerOnePieceActionPerformed(evt);
            }
        });

        playerOneText.setText("Player One Name:");

        javax.swing.GroupLayout playerOnePanelLayout = new javax.swing.GroupLayout(playerOnePanel);
        playerOnePanel.setLayout(playerOnePanelLayout);
        playerOnePanelLayout.setHorizontalGroup(
            playerOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerOnePanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(playerOneText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playerOneBox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(playerOnePiece, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        playerOnePanelLayout.setVerticalGroup(
            playerOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, playerOnePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(playerOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerOneBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playerOneText)
                    .addComponent(playerOnePiece, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        playerTwoPanel.setVisible(false);
        playerTwoPanel.setEnabled(false);

        playerTwoText.setText("Player Two Name:");

        playerTwoPiece.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose Piece...", "Mouse", "Router", "Keyboard", "Hard Drive" }));
        playerTwoPiece.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerTwoPieceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout playerTwoPanelLayout = new javax.swing.GroupLayout(playerTwoPanel);
        playerTwoPanel.setLayout(playerTwoPanelLayout);
        playerTwoPanelLayout.setHorizontalGroup(
            playerTwoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerTwoPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(playerTwoText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playerTwoBox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(playerTwoPiece, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        playerTwoPanelLayout.setVerticalGroup(
            playerTwoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerTwoPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(playerTwoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerTwoText)
                    .addComponent(playerTwoBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playerTwoPiece, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        playerThreePanel.setVisible(false);
        playerThreePanel.setEnabled(false);

        playerThreeText.setText("Player Three Name:");

        playerThreePiece.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose Piece...", "Mouse", "Router", "Keyboard", "Hard Drive" }));
        playerThreePiece.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerThreePieceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout playerThreePanelLayout = new javax.swing.GroupLayout(playerThreePanel);
        playerThreePanel.setLayout(playerThreePanelLayout);
        playerThreePanelLayout.setHorizontalGroup(
            playerThreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerThreePanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(playerThreeText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playerThreeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(playerThreePiece, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        playerThreePanelLayout.setVerticalGroup(
            playerThreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerThreePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playerThreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerThreeText)
                    .addComponent(playerThreeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playerThreePiece, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        playerFourPanel.setVisible(false);
        playerFourPanel.setEnabled(false);

        playerFourText.setText("Player Four Name:");

        playerFourPiece.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose Piece...", "Mouse", "Router", "Keyboard", "Hard Drive" }));
        playerFourPiece.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerFourPieceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout playerFourPanelLayout = new javax.swing.GroupLayout(playerFourPanel);
        playerFourPanel.setLayout(playerFourPanelLayout);
        playerFourPanelLayout.setHorizontalGroup(
            playerFourPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerFourPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(playerFourText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playerFourBox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(playerFourPiece, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        playerFourPanelLayout.setVerticalGroup(
            playerFourPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, playerFourPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(playerFourPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerFourBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playerFourText)
                    .addComponent(playerFourPiece, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout newGameFrameLayout = new javax.swing.GroupLayout(newGameFrame.getContentPane());
        newGameFrame.getContentPane().setLayout(newGameFrameLayout);
        newGameFrameLayout.setHorizontalGroup(
            newGameFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newGameFrameLayout.createSequentialGroup()
                .addGroup(newGameFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playerOnePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(playerTwoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(newGameFrameLayout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(howManyPlayersText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(onePlayerRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(twoPlayerRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(threePlayerRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fourPlayerRadio)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(playerFourPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(playerThreePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(newGameFrameLayout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(startGameButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        newGameFrameLayout.setVerticalGroup(
            newGameFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newGameFrameLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(newGameFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(howManyPlayersText)
                    .addComponent(onePlayerRadio)
                    .addComponent(twoPlayerRadio)
                    .addComponent(threePlayerRadio)
                    .addComponent(fourPlayerRadio))
                .addGap(18, 18, 18)
                .addComponent(playerOnePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(playerTwoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playerThreePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playerFourPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(startGameButton)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        winGameFrame.setBackground(new java.awt.Color(255, 255, 255));
        winGameFrame.setMinimumSize(new java.awt.Dimension(400, 200));
        winGameFrame.setLocationRelativeTo(null);
        winGameFrame.setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 255, 51), new java.awt.Color(0, 255, 0), new java.awt.Color(0, 255, 0), new java.awt.Color(0, 255, 0)));

        youWinText.setFont(new java.awt.Font("Quartz MS", 0, 24)); // NOI18N
        youWinText.setForeground(new java.awt.Color(0, 255, 0));
        youWinText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        youWinText.setText("Congradulations...");
        youWinText.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        youWinText.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Quartz MS", 0, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 255, 0));
        jButton1.setText("EXIT");
        jButton1.setContentAreaFilled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        youWinText2.setFont(new java.awt.Font("Quartz MS", 0, 24)); // NOI18N
        youWinText2.setForeground(new java.awt.Color(0, 255, 0));
        youWinText2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        youWinText2.setText("Congradulations...");
        youWinText2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        youWinText2.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        youWinText3.setFont(new java.awt.Font("Quartz MS", 0, 24)); // NOI18N
        youWinText3.setForeground(new java.awt.Color(0, 255, 0));
        youWinText3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        youWinText3.setText("Congradulations...");
        youWinText3.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        youWinText3.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(157, 157, 157)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(youWinText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(youWinText2, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                    .addComponent(youWinText3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addComponent(youWinText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(youWinText2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(youWinText3)
                .addGap(23, 23, 23)
                .addComponent(jButton1))
        );

        javax.swing.GroupLayout winGameFrameLayout = new javax.swing.GroupLayout(winGameFrame.getContentPane());
        winGameFrame.getContentPane().setLayout(winGameFrameLayout);
        winGameFrameLayout.setHorizontalGroup(
            winGameFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        winGameFrameLayout.setVerticalGroup(
            winGameFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cables and Racks");
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(660, 750));
        setName("gameFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(648, 750));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        rollButton.setText("Roll");
        rollButton.setEnabled(false);
        rollButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollDiceAction(evt);
            }
        });
        getContentPane().add(rollButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 660, -1, -1));

        newGameButton.setText("New Game");
        newGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameButtonActionPerformed(evt);
            }
        });
        getContentPane().add(newGameButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 670, -1, -1));

        startButton.setLabel("Start");
        startButton.setVisible(false);
        startButton.setEnabled(false);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        getContentPane().add(startButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 670, 80, -1));

        turnOrderText.setText("Turn order is: ");
        turnOrderText.setVisible(false);
        getContentPane().add(turnOrderText, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 650, 380, -1));

        turnText.setText("Turn:");
        turnText.setVisible(false);
        getContentPane().add(turnText, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 660, -1, -1));
        getContentPane().add(playerMovedText, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 660, -1, -1));
        getContentPane().add(ladderSlideText, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 685, -1, -1));

        rack4to15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CablesAndRacks/Rack4to14.png"))); // NOI18N
        getContentPane().add(rack4to15, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 490, 220, 170));

        rack9to31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CablesAndRacks/Rack9to31.png"))); // NOI18N
        getContentPane().add(rack9to31, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 390, 160, 250));

        rack21to42.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CablesAndRacks/Rack21to42.png"))); // NOI18N
        getContentPane().add(rack21to42, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 330, 160, 180));

        rack28to84.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CablesAndRacks/Rack28to84.png"))); // NOI18N
        getContentPane().add(rack28to84, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 60, 310, 450));

        rack36to44.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CablesAndRacks/Rack36to44.png"))); // NOI18N
        getContentPane().add(rack36to44, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 310, 120, 140));

        rack51to67.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CablesAndRacks/Rack51to67.png"))); // NOI18N
        getContentPane().add(rack51to67, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 190, 230, 130));

        rack71to91.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CablesAndRacks/Rack71to91.png"))); // NOI18N
        getContentPane().add(rack71to91, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 60, 180));

        rack80to100.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CablesAndRacks/Rack71to91.png"))); // NOI18N
        getContentPane().add(rack80to100, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 10, 60, 180));

        square1.setBackground(new java.awt.Color(255, 255, 255));
        square1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square1.setPreferredSize(new java.awt.Dimension(64, 64));
        square1.setLayout(null);

        playerOnePiecePlace.setPreferredSize(new java.awt.Dimension(32, 32));
        playerPieces.add(playerOnePiecePlace);

        square1.add(playerOnePiecePlace);
        playerOnePiecePlace.setBounds(0, 0, 32, 32);

        playerTwoPiecePlace.setPreferredSize(new java.awt.Dimension(32, 32));
        playerTwoPiecePlace.setRequestFocusEnabled(false);
        playerPieces.add(playerTwoPiecePlace);
        square1.add(playerTwoPiecePlace);
        playerTwoPiecePlace.setBounds(30, 0, 32, 32);

        playerPieces.add(playerThreePiecePlace);
        square1.add(playerThreePiecePlace);
        playerThreePiecePlace.setBounds(0, 30, 32, 32);

        playerPieces.add(playerFourPiecePlace);
        square1.add(playerFourPiecePlace);
        playerFourPiecePlace.setBounds(30, 30, 32, 32);

        BoardContainer.add(square1);
        square1.setBounds(0, 576, 64, 64);

        square2.setBackground(new java.awt.Color(255, 255, 255));
        square2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square2.setPreferredSize(new java.awt.Dimension(64, 64));
        square2.setLayout(null);
        BoardContainer.add(square2);
        square2.setBounds(64, 576, 64, 64);

        square3.setBackground(new java.awt.Color(255, 255, 255));
        square3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square3.setPreferredSize(new java.awt.Dimension(64, 64));
        square3.setLayout(null);
        BoardContainer.add(square3);
        square3.setBounds(128, 576, 64, 64);

        square4.setBackground(new java.awt.Color(255, 255, 255));
        square4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square4.setPreferredSize(new java.awt.Dimension(64, 64));
        square4.setLayout(null);
        BoardContainer.add(square4);
        square4.setBounds(192, 576, 64, 64);

        square5.setBackground(new java.awt.Color(255, 255, 255));
        square5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square5.setPreferredSize(new java.awt.Dimension(64, 64));
        square5.setLayout(null);
        BoardContainer.add(square5);
        square5.setBounds(256, 576, 64, 64);

        square6.setBackground(new java.awt.Color(255, 255, 255));
        square6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square6.setPreferredSize(new java.awt.Dimension(64, 64));
        square6.setLayout(null);
        BoardContainer.add(square6);
        square6.setBounds(320, 576, 64, 64);

        square7.setBackground(new java.awt.Color(255, 255, 255));
        square7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square7.setPreferredSize(new java.awt.Dimension(64, 64));
        square7.setLayout(null);
        BoardContainer.add(square7);
        square7.setBounds(384, 576, 64, 64);

        square8.setBackground(new java.awt.Color(255, 255, 255));
        square8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square8.setPreferredSize(new java.awt.Dimension(64, 64));
        square8.setLayout(null);
        BoardContainer.add(square8);
        square8.setBounds(448, 576, 64, 64);

        square9.setBackground(new java.awt.Color(255, 255, 255));
        square9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square9.setPreferredSize(new java.awt.Dimension(64, 64));
        square9.setLayout(null);
        BoardContainer.add(square9);
        square9.setBounds(512, 576, 64, 64);

        square10.setBackground(new java.awt.Color(255, 255, 255));
        square10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square10.setPreferredSize(new java.awt.Dimension(64, 64));
        square10.setLayout(null);
        BoardContainer.add(square10);
        square10.setBounds(576, 576, 64, 64);

        square11.setBackground(new java.awt.Color(255, 255, 255));
        square11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square11.setPreferredSize(new java.awt.Dimension(64, 64));
        square11.setLayout(null);
        BoardContainer.add(square11);
        square11.setBounds(576, 512, 64, 64);

        square12.setBackground(new java.awt.Color(255, 255, 255));
        square12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square12.setPreferredSize(new java.awt.Dimension(64, 64));
        square12.setLayout(null);
        BoardContainer.add(square12);
        square12.setBounds(512, 512, 64, 64);

        square13.setBackground(new java.awt.Color(255, 255, 255));
        square13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square13.setPreferredSize(new java.awt.Dimension(64, 64));
        square13.setLayout(null);
        BoardContainer.add(square13);
        square13.setBounds(448, 512, 64, 64);

        square14.setBackground(new java.awt.Color(255, 255, 255));
        square14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square14.setPreferredSize(new java.awt.Dimension(64, 64));
        square14.setLayout(null);
        BoardContainer.add(square14);
        square14.setBounds(384, 512, 64, 64);

        square15.setBackground(new java.awt.Color(255, 255, 255));
        square15.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square15.setPreferredSize(new java.awt.Dimension(64, 64));
        square15.setLayout(null);
        BoardContainer.add(square15);
        square15.setBounds(320, 512, 64, 64);

        square16.setBackground(new java.awt.Color(255, 255, 255));
        square16.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square16.setPreferredSize(new java.awt.Dimension(64, 64));
        square16.setLayout(null);
        BoardContainer.add(square16);
        square16.setBounds(256, 512, 64, 64);

        square17.setBackground(new java.awt.Color(255, 255, 255));
        square17.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square17.setPreferredSize(new java.awt.Dimension(64, 64));
        square17.setLayout(null);
        BoardContainer.add(square17);
        square17.setBounds(192, 512, 64, 64);

        square18.setBackground(new java.awt.Color(255, 255, 255));
        square18.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square18.setPreferredSize(new java.awt.Dimension(64, 64));
        square18.setLayout(null);
        BoardContainer.add(square18);
        square18.setBounds(128, 512, 64, 64);

        square19.setBackground(new java.awt.Color(255, 255, 255));
        square19.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square19.setPreferredSize(new java.awt.Dimension(64, 64));
        square19.setLayout(null);
        BoardContainer.add(square19);
        square19.setBounds(64, 512, 64, 64);

        square20.setBackground(new java.awt.Color(255, 255, 255));
        square20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square20.setPreferredSize(new java.awt.Dimension(64, 64));
        square20.setLayout(null);
        BoardContainer.add(square20);
        square20.setBounds(0, 512, 64, 64);

        square21.setBackground(new java.awt.Color(255, 255, 255));
        square21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square21.setPreferredSize(new java.awt.Dimension(64, 64));
        square21.setLayout(null);
        BoardContainer.add(square21);
        square21.setBounds(0, 448, 64, 64);

        square22.setBackground(new java.awt.Color(255, 255, 255));
        square22.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square22.setPreferredSize(new java.awt.Dimension(64, 64));
        square22.setLayout(null);
        BoardContainer.add(square22);
        square22.setBounds(64, 448, 64, 64);

        square23.setBackground(new java.awt.Color(255, 255, 255));
        square23.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square23.setPreferredSize(new java.awt.Dimension(64, 64));
        square23.setLayout(null);
        BoardContainer.add(square23);
        square23.setBounds(128, 448, 64, 64);

        square24.setBackground(new java.awt.Color(255, 255, 255));
        square24.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square24.setPreferredSize(new java.awt.Dimension(64, 64));
        square24.setLayout(null);
        BoardContainer.add(square24);
        square24.setBounds(192, 448, 64, 64);

        square25.setBackground(new java.awt.Color(255, 255, 255));
        square25.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square25.setPreferredSize(new java.awt.Dimension(64, 64));
        square25.setLayout(null);
        BoardContainer.add(square25);
        square25.setBounds(256, 448, 64, 64);

        square26.setBackground(new java.awt.Color(255, 255, 255));
        square26.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square26.setPreferredSize(new java.awt.Dimension(64, 64));
        square26.setLayout(null);
        BoardContainer.add(square26);
        square26.setBounds(320, 448, 64, 64);

        square27.setBackground(new java.awt.Color(255, 255, 255));
        square27.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square27.setPreferredSize(new java.awt.Dimension(64, 64));
        square27.setLayout(null);
        BoardContainer.add(square27);
        square27.setBounds(384, 448, 64, 64);

        square28.setBackground(new java.awt.Color(255, 255, 255));
        square28.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square28.setPreferredSize(new java.awt.Dimension(64, 64));
        square28.setLayout(null);
        BoardContainer.add(square28);
        square28.setBounds(448, 448, 64, 64);

        square29.setBackground(new java.awt.Color(255, 255, 255));
        square29.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square29.setPreferredSize(new java.awt.Dimension(64, 64));
        square29.setLayout(null);
        BoardContainer.add(square29);
        square29.setBounds(512, 448, 64, 64);

        square30.setBackground(new java.awt.Color(255, 255, 255));
        square30.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square30.setPreferredSize(new java.awt.Dimension(64, 64));
        square30.setLayout(null);
        BoardContainer.add(square30);
        square30.setBounds(576, 448, 64, 64);

        square31.setBackground(new java.awt.Color(255, 255, 255));
        square31.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square31.setPreferredSize(new java.awt.Dimension(64, 64));
        square31.setLayout(null);
        BoardContainer.add(square31);
        square31.setBounds(576, 384, 64, 64);

        square32.setBackground(new java.awt.Color(255, 255, 255));
        square32.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square32.setPreferredSize(new java.awt.Dimension(64, 64));
        square32.setLayout(null);
        BoardContainer.add(square32);
        square32.setBounds(512, 384, 64, 64);

        square33.setBackground(new java.awt.Color(255, 255, 255));
        square33.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square33.setPreferredSize(new java.awt.Dimension(64, 64));
        square33.setLayout(null);
        BoardContainer.add(square33);
        square33.setBounds(448, 384, 64, 64);

        square34.setBackground(new java.awt.Color(255, 255, 255));
        square34.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square34.setPreferredSize(new java.awt.Dimension(64, 64));
        square34.setLayout(null);
        BoardContainer.add(square34);
        square34.setBounds(384, 384, 64, 64);

        square35.setBackground(new java.awt.Color(255, 255, 255));
        square35.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square35.setPreferredSize(new java.awt.Dimension(64, 64));
        square35.setLayout(null);
        BoardContainer.add(square35);
        square35.setBounds(320, 384, 64, 64);

        square36.setBackground(new java.awt.Color(255, 255, 255));
        square36.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square36.setPreferredSize(new java.awt.Dimension(64, 64));
        square36.setLayout(null);
        BoardContainer.add(square36);
        square36.setBounds(256, 384, 64, 64);

        square37.setBackground(new java.awt.Color(255, 255, 255));
        square37.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square37.setPreferredSize(new java.awt.Dimension(64, 64));
        square37.setLayout(null);
        BoardContainer.add(square37);
        square37.setBounds(192, 384, 64, 64);

        square38.setBackground(new java.awt.Color(255, 255, 255));
        square38.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square38.setPreferredSize(new java.awt.Dimension(64, 64));
        square38.setLayout(null);
        BoardContainer.add(square38);
        square38.setBounds(128, 384, 64, 64);

        square39.setBackground(new java.awt.Color(255, 255, 255));
        square39.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square39.setPreferredSize(new java.awt.Dimension(64, 64));
        square39.setLayout(null);
        BoardContainer.add(square39);
        square39.setBounds(64, 384, 64, 64);

        square40.setBackground(new java.awt.Color(255, 255, 255));
        square40.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square40.setPreferredSize(new java.awt.Dimension(64, 64));
        square40.setLayout(null);
        BoardContainer.add(square40);
        square40.setBounds(0, 384, 64, 64);

        square41.setBackground(new java.awt.Color(255, 255, 255));
        square41.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square41.setPreferredSize(new java.awt.Dimension(64, 64));
        square41.setLayout(null);
        BoardContainer.add(square41);
        square41.setBounds(0, 320, 64, 64);

        square42.setBackground(new java.awt.Color(255, 255, 255));
        square42.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square42.setPreferredSize(new java.awt.Dimension(64, 64));
        square42.setLayout(null);
        BoardContainer.add(square42);
        square42.setBounds(64, 320, 64, 64);

        square43.setBackground(new java.awt.Color(255, 255, 255));
        square43.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square43.setPreferredSize(new java.awt.Dimension(64, 64));
        square43.setLayout(null);
        BoardContainer.add(square43);
        square43.setBounds(128, 320, 64, 64);

        square44.setBackground(new java.awt.Color(255, 255, 255));
        square44.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square44.setPreferredSize(new java.awt.Dimension(64, 64));
        square44.setLayout(null);
        BoardContainer.add(square44);
        square44.setBounds(192, 320, 64, 64);

        square45.setBackground(new java.awt.Color(255, 255, 255));
        square45.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square45.setPreferredSize(new java.awt.Dimension(64, 64));
        square45.setLayout(null);
        BoardContainer.add(square45);
        square45.setBounds(256, 320, 64, 64);

        square46.setBackground(new java.awt.Color(255, 255, 255));
        square46.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square46.setPreferredSize(new java.awt.Dimension(64, 64));
        square46.setLayout(null);
        BoardContainer.add(square46);
        square46.setBounds(320, 320, 64, 64);

        square47.setBackground(new java.awt.Color(255, 255, 255));
        square47.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square47.setPreferredSize(new java.awt.Dimension(64, 64));
        square47.setLayout(null);
        BoardContainer.add(square47);
        square47.setBounds(384, 320, 64, 64);

        square48.setBackground(new java.awt.Color(255, 255, 255));
        square48.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square48.setPreferredSize(new java.awt.Dimension(64, 64));
        square48.setLayout(null);
        BoardContainer.add(square48);
        square48.setBounds(448, 320, 64, 64);

        square49.setBackground(new java.awt.Color(255, 255, 255));
        square49.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square49.setPreferredSize(new java.awt.Dimension(64, 64));
        square49.setLayout(null);
        BoardContainer.add(square49);
        square49.setBounds(512, 320, 64, 64);

        square50.setBackground(new java.awt.Color(255, 255, 255));
        square50.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square50.setPreferredSize(new java.awt.Dimension(64, 64));
        square50.setLayout(null);
        BoardContainer.add(square50);
        square50.setBounds(576, 320, 64, 64);

        square51.setBackground(new java.awt.Color(255, 255, 255));
        square51.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square51.setPreferredSize(new java.awt.Dimension(64, 64));
        square51.setLayout(null);
        BoardContainer.add(square51);
        square51.setBounds(576, 256, 64, 64);

        square52.setBackground(new java.awt.Color(255, 255, 255));
        square52.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square52.setPreferredSize(new java.awt.Dimension(64, 64));
        square52.setLayout(null);
        BoardContainer.add(square52);
        square52.setBounds(512, 256, 64, 64);

        square53.setBackground(new java.awt.Color(255, 255, 255));
        square53.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square53.setPreferredSize(new java.awt.Dimension(64, 64));
        square53.setLayout(null);
        BoardContainer.add(square53);
        square53.setBounds(448, 256, 64, 64);

        square54.setBackground(new java.awt.Color(255, 255, 255));
        square54.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square54.setPreferredSize(new java.awt.Dimension(64, 64));
        square54.setLayout(null);
        BoardContainer.add(square54);
        square54.setBounds(384, 256, 64, 64);

        square55.setBackground(new java.awt.Color(255, 255, 255));
        square55.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square55.setPreferredSize(new java.awt.Dimension(64, 64));
        square55.setLayout(null);
        BoardContainer.add(square55);
        square55.setBounds(320, 256, 64, 64);

        square56.setBackground(new java.awt.Color(255, 255, 255));
        square56.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square56.setPreferredSize(new java.awt.Dimension(64, 64));
        square56.setLayout(null);
        BoardContainer.add(square56);
        square56.setBounds(256, 256, 64, 64);

        square57.setBackground(new java.awt.Color(255, 255, 255));
        square57.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square57.setPreferredSize(new java.awt.Dimension(64, 64));
        square57.setLayout(null);
        BoardContainer.add(square57);
        square57.setBounds(192, 256, 64, 64);

        square58.setBackground(new java.awt.Color(255, 255, 255));
        square58.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square58.setPreferredSize(new java.awt.Dimension(64, 64));
        square58.setLayout(null);
        BoardContainer.add(square58);
        square58.setBounds(128, 256, 64, 64);

        square59.setBackground(new java.awt.Color(255, 255, 255));
        square59.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square59.setPreferredSize(new java.awt.Dimension(64, 64));
        square59.setLayout(null);
        BoardContainer.add(square59);
        square59.setBounds(64, 256, 64, 64);

        square60.setBackground(new java.awt.Color(255, 255, 255));
        square60.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square60.setPreferredSize(new java.awt.Dimension(64, 64));
        square60.setLayout(null);
        BoardContainer.add(square60);
        square60.setBounds(0, 256, 64, 64);

        square61.setBackground(new java.awt.Color(255, 255, 255));
        square61.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square61.setPreferredSize(new java.awt.Dimension(64, 64));
        square61.setLayout(null);
        BoardContainer.add(square61);
        square61.setBounds(0, 192, 64, 64);

        square62.setBackground(new java.awt.Color(255, 255, 255));
        square62.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square62.setPreferredSize(new java.awt.Dimension(64, 64));
        square62.setLayout(null);
        BoardContainer.add(square62);
        square62.setBounds(64, 192, 64, 64);

        square63.setBackground(new java.awt.Color(255, 255, 255));
        square63.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square63.setPreferredSize(new java.awt.Dimension(64, 64));
        square63.setLayout(null);
        BoardContainer.add(square63);
        square63.setBounds(128, 192, 64, 64);

        square64.setBackground(new java.awt.Color(255, 255, 255));
        square64.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square64.setPreferredSize(new java.awt.Dimension(64, 64));
        square64.setLayout(null);
        BoardContainer.add(square64);
        square64.setBounds(192, 192, 64, 64);

        square65.setBackground(new java.awt.Color(255, 255, 255));
        square65.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square65.setPreferredSize(new java.awt.Dimension(64, 64));
        square65.setLayout(null);
        BoardContainer.add(square65);
        square65.setBounds(256, 192, 64, 64);

        square66.setBackground(new java.awt.Color(255, 255, 255));
        square66.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square66.setPreferredSize(new java.awt.Dimension(64, 64));
        square66.setLayout(null);
        BoardContainer.add(square66);
        square66.setBounds(320, 192, 64, 64);

        square67.setBackground(new java.awt.Color(255, 255, 255));
        square67.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square67.setPreferredSize(new java.awt.Dimension(64, 64));
        square67.setLayout(null);
        BoardContainer.add(square67);
        square67.setBounds(384, 192, 64, 64);

        square68.setBackground(new java.awt.Color(255, 255, 255));
        square68.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square68.setPreferredSize(new java.awt.Dimension(64, 64));
        square68.setLayout(null);
        BoardContainer.add(square68);
        square68.setBounds(448, 192, 64, 64);

        square69.setBackground(new java.awt.Color(255, 255, 255));
        square69.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square69.setPreferredSize(new java.awt.Dimension(64, 64));
        square69.setLayout(null);
        BoardContainer.add(square69);
        square69.setBounds(512, 192, 64, 64);

        square70.setBackground(new java.awt.Color(255, 255, 255));
        square70.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square70.setPreferredSize(new java.awt.Dimension(64, 64));
        square70.setLayout(null);
        BoardContainer.add(square70);
        square70.setBounds(576, 192, 64, 64);

        square71.setBackground(new java.awt.Color(255, 255, 255));
        square71.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square71.setPreferredSize(new java.awt.Dimension(64, 64));
        square71.setLayout(null);
        BoardContainer.add(square71);
        square71.setBounds(576, 128, 64, 64);

        square72.setBackground(new java.awt.Color(255, 255, 255));
        square72.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square72.setPreferredSize(new java.awt.Dimension(64, 64));
        square72.setLayout(null);
        BoardContainer.add(square72);
        square72.setBounds(512, 128, 64, 64);

        square73.setBackground(new java.awt.Color(255, 255, 255));
        square73.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square73.setPreferredSize(new java.awt.Dimension(64, 64));
        square73.setLayout(null);
        BoardContainer.add(square73);
        square73.setBounds(448, 128, 64, 64);

        square74.setBackground(new java.awt.Color(255, 255, 255));
        square74.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square74.setPreferredSize(new java.awt.Dimension(64, 64));
        square74.setLayout(null);
        BoardContainer.add(square74);
        square74.setBounds(384, 128, 64, 64);

        square75.setBackground(new java.awt.Color(255, 255, 255));
        square75.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square75.setPreferredSize(new java.awt.Dimension(64, 64));
        square75.setLayout(null);
        BoardContainer.add(square75);
        square75.setBounds(320, 128, 64, 64);

        square76.setBackground(new java.awt.Color(255, 255, 255));
        square76.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square76.setPreferredSize(new java.awt.Dimension(64, 64));
        square76.setLayout(null);
        BoardContainer.add(square76);
        square76.setBounds(256, 128, 64, 64);

        square77.setBackground(new java.awt.Color(255, 255, 255));
        square77.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square77.setPreferredSize(new java.awt.Dimension(64, 64));
        square77.setLayout(null);
        BoardContainer.add(square77);
        square77.setBounds(192, 128, 64, 64);

        square78.setBackground(new java.awt.Color(255, 255, 255));
        square78.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square78.setPreferredSize(new java.awt.Dimension(64, 64));
        square78.setLayout(null);
        BoardContainer.add(square78);
        square78.setBounds(128, 128, 64, 64);

        square79.setBackground(new java.awt.Color(255, 255, 255));
        square79.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square79.setPreferredSize(new java.awt.Dimension(64, 64));
        square79.setLayout(null);
        BoardContainer.add(square79);
        square79.setBounds(64, 128, 64, 64);

        square80.setBackground(new java.awt.Color(255, 255, 255));
        square80.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square80.setPreferredSize(new java.awt.Dimension(64, 64));
        square80.setLayout(null);
        BoardContainer.add(square80);
        square80.setBounds(0, 128, 64, 64);

        square81.setBackground(new java.awt.Color(255, 255, 255));
        square81.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square81.setPreferredSize(new java.awt.Dimension(64, 64));
        square81.setLayout(null);
        BoardContainer.add(square81);
        square81.setBounds(0, 64, 64, 64);

        square82.setBackground(new java.awt.Color(255, 255, 255));
        square82.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square82.setPreferredSize(new java.awt.Dimension(64, 64));
        square82.setLayout(null);
        BoardContainer.add(square82);
        square82.setBounds(64, 64, 64, 64);

        square83.setBackground(new java.awt.Color(255, 255, 255));
        square83.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square83.setPreferredSize(new java.awt.Dimension(64, 64));
        square83.setLayout(null);
        BoardContainer.add(square83);
        square83.setBounds(128, 64, 64, 64);

        square84.setBackground(new java.awt.Color(255, 255, 255));
        square84.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square84.setPreferredSize(new java.awt.Dimension(64, 64));
        square84.setLayout(null);
        BoardContainer.add(square84);
        square84.setBounds(192, 64, 64, 64);

        square85.setBackground(new java.awt.Color(255, 255, 255));
        square85.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square85.setPreferredSize(new java.awt.Dimension(64, 64));
        square85.setLayout(null);
        BoardContainer.add(square85);
        square85.setBounds(256, 64, 64, 64);

        square86.setBackground(new java.awt.Color(255, 255, 255));
        square86.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square86.setPreferredSize(new java.awt.Dimension(64, 64));
        square86.setLayout(null);
        BoardContainer.add(square86);
        square86.setBounds(320, 64, 64, 64);

        square87.setBackground(new java.awt.Color(255, 255, 255));
        square87.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square87.setPreferredSize(new java.awt.Dimension(64, 64));
        square87.setLayout(null);
        BoardContainer.add(square87);
        square87.setBounds(384, 64, 64, 64);

        square88.setBackground(new java.awt.Color(255, 255, 255));
        square88.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square88.setPreferredSize(new java.awt.Dimension(64, 64));
        square88.setLayout(null);
        BoardContainer.add(square88);
        square88.setBounds(448, 64, 64, 64);

        square89.setBackground(new java.awt.Color(255, 255, 255));
        square89.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square89.setPreferredSize(new java.awt.Dimension(64, 64));
        square89.setLayout(null);
        BoardContainer.add(square89);
        square89.setBounds(512, 64, 64, 64);

        square90.setBackground(new java.awt.Color(255, 255, 255));
        square90.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square90.setPreferredSize(new java.awt.Dimension(64, 64));
        square90.setLayout(null);
        BoardContainer.add(square90);
        square90.setBounds(576, 64, 64, 64);

        square91.setBackground(new java.awt.Color(255, 255, 255));
        square91.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square91.setPreferredSize(new java.awt.Dimension(64, 64));
        square91.setLayout(null);
        BoardContainer.add(square91);
        square91.setBounds(576, 0, 64, 64);

        square92.setBackground(new java.awt.Color(255, 255, 255));
        square92.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square92.setPreferredSize(new java.awt.Dimension(64, 64));
        square92.setLayout(null);
        BoardContainer.add(square92);
        square92.setBounds(512, 0, 64, 64);

        square93.setBackground(new java.awt.Color(255, 255, 255));
        square93.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square93.setPreferredSize(new java.awt.Dimension(64, 64));
        square93.setLayout(null);
        BoardContainer.add(square93);
        square93.setBounds(448, 0, 64, 64);

        square94.setBackground(new java.awt.Color(255, 255, 255));
        square94.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square94.setPreferredSize(new java.awt.Dimension(64, 64));
        square94.setLayout(null);
        BoardContainer.add(square94);
        square94.setBounds(384, 0, 64, 64);

        square95.setBackground(new java.awt.Color(255, 255, 255));
        square95.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square95.setPreferredSize(new java.awt.Dimension(64, 64));
        square95.setLayout(null);
        BoardContainer.add(square95);
        square95.setBounds(320, 0, 64, 64);

        square96.setBackground(new java.awt.Color(255, 255, 255));
        square96.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square96.setPreferredSize(new java.awt.Dimension(64, 64));
        square96.setLayout(null);
        BoardContainer.add(square96);
        square96.setBounds(256, 0, 64, 64);

        square97.setBackground(new java.awt.Color(255, 255, 255));
        square97.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square97.setPreferredSize(new java.awt.Dimension(64, 64));
        square97.setLayout(null);
        BoardContainer.add(square97);
        square97.setBounds(192, 0, 64, 64);

        square98.setBackground(new java.awt.Color(255, 255, 255));
        square98.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square98.setPreferredSize(new java.awt.Dimension(64, 64));
        square98.setLayout(null);
        BoardContainer.add(square98);
        square98.setBounds(128, 0, 64, 64);

        square99.setBackground(new java.awt.Color(255, 255, 255));
        square99.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square99.setPreferredSize(new java.awt.Dimension(64, 64));
        square99.setLayout(null);
        BoardContainer.add(square99);
        square99.setBounds(64, 0, 64, 64);

        square100.setBackground(new java.awt.Color(255, 255, 255));
        square100.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        square100.setPreferredSize(new java.awt.Dimension(64, 64));
        square100.setLayout(null);
        BoardContainer.add(square100);
        square100.setBounds(0, 0, 64, 64);

        getContentPane().add(BoardContainer, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 640, 640));

        controlSquare.setBackground(new java.awt.Color(255, 255, 255));
        controlSquare.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
        controlSquare.setPreferredSize(new java.awt.Dimension(64, 64));
        squares.add(square1);
        squares.add(square2);
        squares.add(square3);
        squares.add(square4);
        squares.add(square5);
        squares.add(square6);
        squares.add(square7);
        squares.add(square8);
        squares.add(square9);
        squares.add(square10);
        squares.add(square11);
        squares.add(square12);
        squares.add(square13);
        squares.add(square14);
        squares.add(square15);
        squares.add(square16);
        squares.add(square17);
        squares.add(square18);
        squares.add(square19);
        squares.add(square20);
        squares.add(square21);
        squares.add(square22);
        squares.add(square23);
        squares.add(square24);
        squares.add(square25);
        squares.add(square26);
        squares.add(square27);
        squares.add(square28);
        squares.add(square29);
        squares.add(square30);
        squares.add(square31);
        squares.add(square32);
        squares.add(square33);
        squares.add(square34);
        squares.add(square35);
        squares.add(square36);
        squares.add(square37);
        squares.add(square38);
        squares.add(square39);
        squares.add(square40);
        squares.add(square41);
        squares.add(square42);
        squares.add(square43);
        squares.add(square44);
        squares.add(square45);
        squares.add(square46);
        squares.add(square47);
        squares.add(square48);
        squares.add(square49);
        squares.add(square50);
        squares.add(square51);
        squares.add(square52);
        squares.add(square53);
        squares.add(square54);
        squares.add(square55);
        squares.add(square56);
        squares.add(square57);
        squares.add(square58);
        squares.add(square59);
        squares.add(square60);
        squares.add(square61);
        squares.add(square62);
        squares.add(square63);
        squares.add(square64);
        squares.add(square65);
        squares.add(square66);
        squares.add(square67);
        squares.add(square68);
        squares.add(square69);
        squares.add(square70);
        squares.add(square71);
        squares.add(square72);
        squares.add(square73);
        squares.add(square74);
        squares.add(square75);
        squares.add(square76);
        squares.add(square77);
        squares.add(square78);
        squares.add(square79);
        squares.add(square80);
        squares.add(square81);
        squares.add(square82);
        squares.add(square83);
        squares.add(square84);
        squares.add(square85);
        squares.add(square86);
        squares.add(square87);
        squares.add(square88);
        squares.add(square89);
        squares.add(square90);
        squares.add(square91);
        squares.add(square92);
        squares.add(square93);
        squares.add(square94);
        squares.add(square95);
        squares.add(square96);
        squares.add(square97);
        squares.add(square98);
        squares.add(square99);
        squares.add(square100);
        controlSquare.setLayout(null);
        getContentPane().add(controlSquare, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void rollDiceAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollDiceAction

        
        
        if(turn == players.size())
            turn = 0;    
        
        turnText.setText(players.get(turn).playerName + "'s turn!");     
        ladderSlideText.setText("");
        players.get(turn).rollDice();
        players.get(turn).move();
        checkSpace();
        playerMovedText.setText(players.get(turn).getPlayerName() + " moved " + players.get(turn).getSpacesToMove() + " spaces.");
        squares.get(players.get(turn).getPosition()).add(playerPieces.get(turn));
        super.revalidate();
        super.repaint();
        
        checkWin();
        
        turn++;
        
        
        
        
    }//GEN-LAST:event_rollDiceAction
    
    private void checkSpace()
    {
        for(int x = 0; x < ladderStart.length; x++)
        {
            if(players.get(turn).getPosition() == ladderStart[x])
            {
                players.get(turn).setPosition(ladderEnd[x]);
                ladderSlideText.setText(players.get(turn).getPlayerName() + " fed wire from server room " + ladderStart[x] + " all the way to server room " + ladderEnd[x] + "!");
                break;
            }
        }
        
        for(int x = 0; x < slideStart.length; x++)
        {
            if(players.get(turn).getPosition() == slideStart[x])
            {
                players.get(turn).setPosition(slideEnd[x]);
                ladderSlideText.setText(players.get(turn).getPlayerName() + " found faulty cabling at server room " + slideStart[x] + " and had to feed new wire to server room " + slideEnd[x] + "!");
                break;
            }
        }
    }
    
    private void checkWin()
    {
        if(players.get(turn).getPosition() == 99)
        {
            super.setEnabled(false);
            super.setVisible(false);
            winGameFrame.setEnabled(true);
            winGameFrame.setVisible(true);
            
            youWinText.setText("Congratulations " + players.get(turn).getPlayerName() + ",");
            youWinText2.setText("You are the champion");
            youWinText3.setText("Of this social gathering");
        }
    }
    
    
    private void twoPlayerRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoPlayerRadioActionPerformed
        // TODO add your handling code here:
        if(twoPlayerRadio.isSelected())
        {
            playerTwoPanel.setVisible(true);
            playerTwoPanel.setEnabled(true);
            
            playerThreePanel.setVisible(false);
            playerThreePanel.setEnabled(false);
            playerThreePiece.setSelectedIndex(0);
            
            playerFourPanel.setVisible(false);
            playerFourPanel.setEnabled(false);
            playerFourPiece.setSelectedIndex(0);
        }
        
    }//GEN-LAST:event_twoPlayerRadioActionPerformed

    private void onePlayerRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onePlayerRadioActionPerformed
        // TODO add your handling code here:
        if(onePlayerRadio.isSelected())
        {
            playerTwoPanel.setVisible(false);
            playerTwoPanel.setEnabled(false);
            playerTwoPiece.setSelectedIndex(0);
            
            playerThreePanel.setVisible(false);
            playerThreePanel.setEnabled(false);
            playerThreePiece.setSelectedIndex(0);
            
            playerFourPanel.setVisible(false);
            playerFourPanel.setEnabled(false);
            playerFourPiece.setSelectedIndex(0);
        }
        
    }//GEN-LAST:event_onePlayerRadioActionPerformed

    private void threePlayerRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threePlayerRadioActionPerformed
        // TODO add your handling code here:
        if(threePlayerRadio.isSelected())
        {
            playerTwoPanel.setVisible(true);
            playerTwoPanel.setEnabled(true);
            
            playerThreePanel.setVisible(true);
            playerThreePanel.setEnabled(true);
            
            playerFourPanel.setVisible(false);
            playerFourPanel.setEnabled(false);
            playerFourPiece.setSelectedIndex(0);
        }
    }//GEN-LAST:event_threePlayerRadioActionPerformed

    private void fourPlayerRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourPlayerRadioActionPerformed
        // TODO add your handling code here:
            playerTwoPanel.setVisible(true);
            playerTwoPanel.setEnabled(true);
            
            playerThreePanel.setVisible(true);
            playerThreePanel.setEnabled(true);
            
            playerFourPanel.setVisible(true);
            playerFourPanel.setEnabled(true);
    }//GEN-LAST:event_fourPlayerRadioActionPerformed

    private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameButtonActionPerformed
        // TODO add your handling code here:
        newGameButton.setVisible(false);
        newGameButton.setEnabled(true);
        newGameFrame.setVisible(true);
        newGameFrame.setEnabled(true);
        super.setEnabled(false);
    }//GEN-LAST:event_newGameButtonActionPerformed

    
    //Start game on the newGameFrame.
    private void startGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startGameButtonActionPerformed
        // TODO add your handling code here
        
        if(onePlayerRadio.isSelected())
        {
            if(playerOneBox.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please enter a name for player one!");
            }
            
            else if(playerOnePiece.getSelectedIndex() == 0)
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please select a game piece for player one!");
            }
            
            else
            {
                everythingsCool = true;
            }
        }
        
        else if(twoPlayerRadio.isSelected())
        {
            if(playerOneBox.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please enter a name for player one!");
            }
            
            else if(playerOnePiece.getSelectedIndex() == 0)
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please select a game piece for player one!");
            }
            
            else if(playerTwoBox.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please enter a name for player two!");
            }
            
            else if(playerTwoPiece.getSelectedIndex() == 0)
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please select a game piece for player two!");
            }
            
            else
            {
                everythingsCool = true;
            }
        }
        
        else if(threePlayerRadio.isSelected())
        {
            if(playerOneBox.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please enter a name for player one!");
            }
            
            else if(playerOnePiece.getSelectedIndex() == 0)
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please select a game piece for player one!");
            }
            
            else if(playerTwoBox.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please enter a name for player two!");
            }
            
            else if(playerTwoPiece.getSelectedIndex() == 0)
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please select a game piece for player two!");
            }
            
            else if(playerThreeBox.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please enter a name for player three!");
            }
            
            else if(playerThreePiece.getSelectedIndex() == 0)
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please select a game piece for player three!");
            }
            
            else
            {
                everythingsCool = true;
            }
        }
        
        else if(fourPlayerRadio.isSelected())
        {
            if(playerOneBox.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please enter a name for player one!");
            }
            
            else if(playerOnePiece.getSelectedIndex() == 0)
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please select a game piece for player one!");
            }
            
            else if(playerTwoBox.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please enter a name for player two!");
            }
            
            else if(playerTwoPiece.getSelectedIndex() == 0)
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please select a game piece for player two!");
            }
            
            else if(playerThreeBox.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please enter a name for player three!");
            }
            
            else if(playerThreePiece.getSelectedIndex() == 0)
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please select a game piece for player three!");
            }
            
            else if(playerFourBox.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please enter a name for player four!");
            }
            
            else if(playerFourPiece.getSelectedIndex() == 0)
            {
                JOptionPane.showMessageDialog(newGameFrame, "Please select a game piece for player four!");
            }
            
            else
            {
                everythingsCool = true;
            }
        }
        
        if(everythingsCool)
        {
            if(onePlayerRadio.isSelected())
            {
                try {
                    players.add(new player(1, playerOneBox.getText(), playerOnePiece.getSelectedItem().toString()));
                } catch (IOException ex) {
                    Logger.getLogger(game.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            else if(twoPlayerRadio.isSelected())
            {
                try {
                    players.add(new player(1, playerOneBox.getText(), playerOnePiece.getSelectedItem().toString()));
                    players.add(new player(2, playerTwoBox.getText(), playerTwoPiece.getSelectedItem().toString()));
                } catch (IOException ex) {
                    Logger.getLogger(game.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            
            else if(threePlayerRadio.isSelected())
            {
                try {
                    players.add(new player(1, playerOneBox.getText(), playerOnePiece.getSelectedItem().toString()));
                    players.add(new player(2, playerTwoBox.getText(), playerTwoPiece.getSelectedItem().toString()));
                    players.add(new player(3, playerThreeBox.getText(), playerThreePiece.getSelectedItem().toString()));
                } catch (IOException ex) {
                    Logger.getLogger(game.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            else if(fourPlayerRadio.isSelected())
            {
                try {
                    players.add(new player(1, playerOneBox.getText(), playerOnePiece.getSelectedItem().toString()));
                    players.add(new player(2, playerTwoBox.getText(), playerTwoPiece.getSelectedItem().toString()));
                    players.add(new player(3, playerThreeBox.getText(), playerThreePiece.getSelectedItem().toString()));
                    players.add(new player(4, playerFourBox.getText(), playerFourPiece.getSelectedItem().toString()));
                
                } catch (IOException ex) {
                    Logger.getLogger(game.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            for(int x = 0; x < players.size(); x++)
            {
                playerPieces.get(x).setIcon(createImageIcon(players.get(x).getPieceImagePath()));
                players.get(x).helpDetermine();
            }
            
            determinePlayerOrder();
            super.setEnabled(true);
            startButton.setEnabled(true);
            startButton.setVisible(true);
            String turnOrder = "Turn order is: ";
            for(int x = 0; x < players.size(); x++)
            {
                if(x == players.size() - 1)
                {
                    turnOrder += players.get(x).getPlayerName();
                }
                
                else
                {
                    turnOrder += players.get(x).getPlayerName() + ", ";
                }
            }
            turnOrderText.setText(turnOrder);
            turnOrderText.setVisible(true);
            newGameFrame.setVisible(false);
            newGameFrame.setEnabled(false);
            setupLadders();
            setupSlides();
        }        
    }//GEN-LAST:event_startGameButtonActionPerformed

    private void setupLadders()
    {
        for(int x = 0; x < ladderStart.length; x++)
        {
            squares.get(ladderStart[x]).setBackground(Color.blue);
            squares.get(ladderEnd[x]).setBackground(Color.orange);
        }
    }
    
    private void setupSlides()
    {
        for(int x = 0; x < slideStart.length; x++)
        {
            squares.get(slideStart[x]).setBackground(Color.red);
            squares.get(slideEnd[x]).setBackground(Color.black);
        }
    }
    
    private void determinePlayerOrder()
    {
        //Compare the rolls to figure out who goes in what place.
        Collections.sort(players, player.playerRollComparison);
        for(int x = 0; x < players.size(); x++)
        {
                
            players.get(x).setTurnOrder(x);
                
        }
        
    }
    
    private void playerOnePieceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerOnePieceActionPerformed
        // TODO add your handling code here:
        if(playerOnePiece.getSelectedIndex() == playerTwoPiece.getSelectedIndex() && playerTwoPiece.getSelectedIndex() != 0 || 
                playerOnePiece.getSelectedIndex() == playerThreePiece.getSelectedIndex() && playerThreePiece.getSelectedIndex() != 0 ||
                playerOnePiece.getSelectedIndex() == playerFourPiece.getSelectedIndex() && playerFourPiece.getSelectedIndex() != 0)
        {
            playerOnePiece.setSelectedIndex(0);
            JOptionPane.showMessageDialog(newGameFrame, "Please select a piece for player one that has not already been taken by another player.");
            
        }
    }//GEN-LAST:event_playerOnePieceActionPerformed

    private void playerTwoPieceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerTwoPieceActionPerformed
        // TODO add your handling code here:
        
        if(playerTwoPiece.getSelectedIndex() == playerOnePiece.getSelectedIndex() && playerOnePiece.getSelectedIndex() != 0 || 
                playerTwoPiece.getSelectedIndex() == playerThreePiece.getSelectedIndex() && playerThreePiece.getSelectedIndex() != 0 || 
                playerTwoPiece.getSelectedIndex() == playerFourPiece.getSelectedIndex() && playerFourPiece.getSelectedIndex() != 0)
        {
            playerTwoPiece.setSelectedIndex(0);
            JOptionPane.showMessageDialog(newGameFrame, "Please select a piece for player two that has not already been taken by another player.");
            
        }
        
    }//GEN-LAST:event_playerTwoPieceActionPerformed

    private void playerThreePieceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerThreePieceActionPerformed
        // TODO add your handling code here:
        if(playerThreePiece.getSelectedIndex() == playerOnePiece.getSelectedIndex() && playerOnePiece.getSelectedIndex() != 0 || 
                playerThreePiece.getSelectedIndex() == playerTwoPiece.getSelectedIndex() && playerTwoPiece.getSelectedIndex() != 0 || 
                playerThreePiece.getSelectedIndex() == playerFourPiece.getSelectedIndex() && playerFourPiece.getSelectedIndex() != 0)
        {
            playerThreePiece.setSelectedIndex(0);
            JOptionPane.showMessageDialog(newGameFrame, "Please select a piece for player three that has not already been taken by another player.");
        
            
        }
    }//GEN-LAST:event_playerThreePieceActionPerformed

    private void playerFourPieceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerFourPieceActionPerformed
        // TODO add your handling code here:
        if(playerFourPiece.getSelectedIndex() == playerOnePiece.getSelectedIndex() && playerOnePiece.getSelectedIndex() != 0 || 
                playerFourPiece.getSelectedIndex() == playerThreePiece.getSelectedIndex() && playerThreePiece.getSelectedIndex() != 0 || 
                        playerFourPiece.getSelectedIndex() == playerTwoPiece.getSelectedIndex() && playerTwoPiece.getSelectedIndex() != 0)
        {
            playerFourPiece.setSelectedIndex(0);
            JOptionPane.showMessageDialog(newGameFrame, "Please select a piece for player four that has not already been taken by another player.");
            
        }
        
    }//GEN-LAST:event_playerFourPieceActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO add your handling code here:
        turnOrderText.setVisible(false);
        turnText.setText("Turn: " + players.get(0).playerName);
        turnText.setVisible(true);
        startButton.setVisible(false);
        startButton.setEnabled(false);
        rollButton.setEnabled(true);
    }//GEN-LAST:event_startButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        super.dispose();
        winGameFrame.dispose();
        newGameFrame.dispose();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new game().setVisible(true);
            }
        });
    }
    
    
//<editor-fold defaultstate="collapsed" desc="Variable Declarations">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane BoardContainer;
    private javax.swing.JPanel controlSquare;
    private javax.swing.JRadioButton fourPlayerRadio;
    private javax.swing.JLabel howManyPlayersText;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel ladderSlideText;
    private javax.swing.JButton newGameButton;
    private javax.swing.JFrame newGameFrame;
    private javax.swing.JRadioButton onePlayerRadio;
    private javax.swing.JTextField playerFourBox;
    private javax.swing.JPanel playerFourPanel;
    private javax.swing.JComboBox playerFourPiece;
    private javax.swing.JLabel playerFourPiecePlace;
    private javax.swing.JLabel playerFourText;
    private javax.swing.ButtonGroup playerGroup;
    private javax.swing.JLabel playerMovedText;
    private javax.swing.JTextField playerOneBox;
    private javax.swing.JPanel playerOnePanel;
    private javax.swing.JComboBox playerOnePiece;
    private javax.swing.JLabel playerOnePiecePlace;
    private javax.swing.JLabel playerOneText;
    private javax.swing.JTextField playerThreeBox;
    private javax.swing.JPanel playerThreePanel;
    private javax.swing.JComboBox playerThreePiece;
    private javax.swing.JLabel playerThreePiecePlace;
    private javax.swing.JLabel playerThreeText;
    private javax.swing.JTextField playerTwoBox;
    private javax.swing.JPanel playerTwoPanel;
    private javax.swing.JComboBox playerTwoPiece;
    private javax.swing.JLabel playerTwoPiecePlace;
    private javax.swing.JLabel playerTwoText;
    private javax.swing.JLabel rack21to42;
    private javax.swing.JLabel rack28to84;
    private javax.swing.JLabel rack36to44;
    private javax.swing.JLabel rack4to15;
    private javax.swing.JLabel rack51to67;
    private javax.swing.JLabel rack71to91;
    private javax.swing.JLabel rack80to100;
    private javax.swing.JLabel rack9to31;
    private javax.swing.JButton rollButton;
    private javax.swing.JPanel square1;
    private javax.swing.JPanel square10;
    private javax.swing.JPanel square100;
    private javax.swing.JPanel square11;
    private javax.swing.JPanel square12;
    private javax.swing.JPanel square13;
    private javax.swing.JPanel square14;
    private javax.swing.JPanel square15;
    private javax.swing.JPanel square16;
    private javax.swing.JPanel square17;
    private javax.swing.JPanel square18;
    private javax.swing.JPanel square19;
    private javax.swing.JPanel square2;
    private javax.swing.JPanel square20;
    private javax.swing.JPanel square21;
    private javax.swing.JPanel square22;
    private javax.swing.JPanel square23;
    private javax.swing.JPanel square24;
    private javax.swing.JPanel square25;
    private javax.swing.JPanel square26;
    private javax.swing.JPanel square27;
    private javax.swing.JPanel square28;
    private javax.swing.JPanel square29;
    private javax.swing.JPanel square3;
    private javax.swing.JPanel square30;
    private javax.swing.JPanel square31;
    private javax.swing.JPanel square32;
    private javax.swing.JPanel square33;
    private javax.swing.JPanel square34;
    private javax.swing.JPanel square35;
    private javax.swing.JPanel square36;
    private javax.swing.JPanel square37;
    private javax.swing.JPanel square38;
    private javax.swing.JPanel square39;
    private javax.swing.JPanel square4;
    private javax.swing.JPanel square40;
    private javax.swing.JPanel square41;
    private javax.swing.JPanel square42;
    private javax.swing.JPanel square43;
    private javax.swing.JPanel square44;
    private javax.swing.JPanel square45;
    private javax.swing.JPanel square46;
    private javax.swing.JPanel square47;
    private javax.swing.JPanel square48;
    private javax.swing.JPanel square49;
    private javax.swing.JPanel square5;
    private javax.swing.JPanel square50;
    private javax.swing.JPanel square51;
    private javax.swing.JPanel square52;
    private javax.swing.JPanel square53;
    private javax.swing.JPanel square54;
    private javax.swing.JPanel square55;
    private javax.swing.JPanel square56;
    private javax.swing.JPanel square57;
    private javax.swing.JPanel square58;
    private javax.swing.JPanel square59;
    private javax.swing.JPanel square6;
    private javax.swing.JPanel square60;
    private javax.swing.JPanel square61;
    private javax.swing.JPanel square62;
    private javax.swing.JPanel square63;
    private javax.swing.JPanel square64;
    private javax.swing.JPanel square65;
    private javax.swing.JPanel square66;
    private javax.swing.JPanel square67;
    private javax.swing.JPanel square68;
    private javax.swing.JPanel square69;
    private javax.swing.JPanel square7;
    private javax.swing.JPanel square70;
    private javax.swing.JPanel square71;
    private javax.swing.JPanel square72;
    private javax.swing.JPanel square73;
    private javax.swing.JPanel square74;
    private javax.swing.JPanel square75;
    private javax.swing.JPanel square76;
    private javax.swing.JPanel square77;
    private javax.swing.JPanel square78;
    private javax.swing.JPanel square79;
    private javax.swing.JPanel square8;
    private javax.swing.JPanel square80;
    private javax.swing.JPanel square81;
    private javax.swing.JPanel square82;
    private javax.swing.JPanel square83;
    private javax.swing.JPanel square84;
    private javax.swing.JPanel square85;
    private javax.swing.JPanel square86;
    private javax.swing.JPanel square87;
    private javax.swing.JPanel square88;
    private javax.swing.JPanel square89;
    private javax.swing.JPanel square9;
    private javax.swing.JPanel square90;
    private javax.swing.JPanel square91;
    private javax.swing.JPanel square92;
    private javax.swing.JPanel square93;
    private javax.swing.JPanel square94;
    private javax.swing.JPanel square95;
    private javax.swing.JPanel square96;
    private javax.swing.JPanel square97;
    private javax.swing.JPanel square98;
    private javax.swing.JPanel square99;
    private javax.swing.JButton startButton;
    private javax.swing.JButton startGameButton;
    private javax.swing.JRadioButton threePlayerRadio;
    private javax.swing.JLabel turnOrderText;
    private javax.swing.JLabel turnText;
    private javax.swing.JRadioButton twoPlayerRadio;
    private javax.swing.JFrame winGameFrame;
    private javax.swing.JLabel youWinText;
    private javax.swing.JLabel youWinText2;
    private javax.swing.JLabel youWinText3;
    // End of variables declaration//GEN-END:variables
//</editor-fold>
    
    
    static protected ImageIcon createImageIcon(String path) {
        
        URL imgURL = game.class.getResource(path);
        
        if(imgURL != null)
        {
            return new ImageIcon(imgURL);
        }
        
        else
        {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    private PopupMenu currentPlayerPiece() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}
